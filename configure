#!/bin/sh
#
# Copyright (c) 2022 Benjamin St√ºrz
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

_project=$(tr '\n' ' ' <meson.build | sed 's/^.*projects\s*(\s*\([^)]*\))/\1/')
PROJ_NAME=$(echo "$_project" | cut -d',' -f1 | sed "s/^.*'\\([^']\\+\\)'.*\$/\\1/")
PROJ_VERSION=$(echo "$_project" | sed "s/^.*[^_]version:\\s*'\\([^']\\+\\)'.*\$/\\1/")

# Internal variables.
VERSION="0.3"
quiet=0
ninja_args=""
meson_args=""
srcdir="$(dirname "$0")"
builddir="_build"
suppress_gen=0

# Define the default values for installation paths.
prefix='/usr/local'
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
sysconfdir='${prefix}/etc'
sharedstatedir='${prefix}/com'
localstatedir='${prefix}/var'
libdir='${exec_prefix}/lib'
includedir='${prefix}/include'
datarootdir='${prefix}/share'
datadir='${datarootdir}'
infodir='${datarootdir}/info'
localedir='${datarootdir}/locale'
mandir='${datarootdir}/man'

# Variables copied (stolen) from an autoconf-generated configure script.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters="${as_cr_letters}${as_cr_LETTERS}"
as_cr_digits='0123456789'
as_cr_alnum="${as_cr_Letters}${as_cr_digits}"


eprintf() {
    printf "$@" >&2
    exit 1
}
# Check for a program.
check_for() {
    [ "${quiet}" != 1 ] && printf 'checking for %s... ' "$1" >&2
    check_for_path="$(which "$1" 2>/dev/null)" || { eprintf 'no\nPlease install %s.\n' "$1"; }
    [ "${quiet}" != 1 ] && printf '%s\n' "${check_for_path}" >&2
    printf '%s\n' "${check_for_path}"
}
# Append an argument for meson.
append_arg() {
    meson_args="$(printf "%s %q\n" "${meson_args}" "$1")"
}
is_quiet() {
    [ "${quiet}" = 1 ]
}


################################################################################
############################### Argument parsing ###############################
################################################################################

for arg; do
    case "${arg}" in
    -h|--help)
        printf '`configure` configures %s %s.\n\n' "${PROJ_NAME}" "${PROJ_VERSION}"
        cat - <<EOF
Usage: ./configure [OPTION]... [VAL=VALUE]...

Configuration:
  -h, --help              display this help and exit
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print \`checking ...\` messages
  -n, --no-create         do not create output files
  --srcdir=DIR            find the sources in DIR
  --update-configure      update the configure script itself

Installation directories:
  --prefix=PREFIX         install files in PREFIX
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX

Fine tuning of the installation directories:
  --bindir=DIR            user executables
  --sbindir=DIR           system admin executables
  --libexecdir=DIR        program executables
  --sysconfdir=DIR        read-only single-machine data
  --sharedstatedir=DIR    modifiable architecture-independent data
  --localstatedir=DIR     modifiable single-machine data
  --libdir=DIR            object code libraries
  --includedir=DIR        C header files
  --datarootdir=DIR       read-only arch.-independent data root
  --datadir=DIR           read-only architecture-independent data
  --infodir=DIR           info documentation
  --localedir=DIR         locale-dependent data
  --mandir=DIR            man documentation

Optional Features:
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-silent-rules   less verbose build output
  --disable-silent-rules  verbose build output
  --with-buildtype=BUILD  
  --enable-debug          enable debugging symbols
EOF
        # print_features

        cat - <<EOF

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-buildtype=TYPE   set build type (one of plain, debug, debugoptimized, release, minsize)
  --with-optimization=OPT set optimization level to OPT
EOF
        # print_packages
        exit 0
        ;;
    -V|--version)
        printf "meson-configure %s\n" "${VERSION}"
        exit 0
        ;;
    -q|--quiet|--silent)
        quiet=1
        ;;
    -n|--no-create)
        builddir="$(mktemp -d)"
        suppress_gen=1
        ;;
    --prefix=*|\
    --exec-prefix=*|\
    --bindir=*|\
    --sbindir=*|\
    --libexecdir=*|\
    --sysconfdir=*|\
    --sharedstatedir=*|\
    --localstatedir=*|\
    --libdir=*|\
    --includedir=*|\
    --datarootdir=*|\
    --datadir=*|\
    --infodir=*|\
    --localedir=*|\
    --mandir=*|\
    --srcdir=*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--\([^=]\+\)=.*$/\1/;s/-/_/g')"
        value="$(printf '%s\n' "${arg}" | sed 's/^[^=]\+=\(.*\)$/\1/')"
        eval "${option}=\"$(printf "%q\n" "${value}")\""
        ;;
    --enable-silent-rules|--enable-silent-rules=yes)
        ninja_args=""
        ;;
    --disable-silent-rules|--enable-silent-rules=no)
        ninja_args="-v"
        ;;
    --enable-debug)
        append_arg --debug
        ;;
    --enable-*=*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--enable-//;s/=.*$//')"
        ac_value="$(printf '%s\n' "${arg}" | sed 's/^--enable-[^=]\+=//')"
        case "${ac_value}" in
        yes)
            value=true
            ;;
        no)
            value=false
            ;;
        *)
            eprintf "configure invalid argument %s for option %s.\n" "${ac_value}" "${arg}"
            ;;
        esac
        append_arg "-D${option}=${value}"
        ;;
    --enable-*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--enable-//')"
        append_arg "-D${option}=true"
        ;;
    --disable-*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--disable-//')"
        append_arg "-D${option}=false"
        ;;
    --with-buildtype=*|--with-optimization=*)
        append_arg "$(printf "%s\n" "${arg}" | sed 's/with-//')"
        ;;
    --with-*=*)
        append_arg "$(printf '%s\n' "${arg}" | sed 's/^--with-/-D/')"
        ;;
    --with-*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--with-//')"
        append_arg "-D${option}=true"
        ;;
    --without-*)
        option="$(printf '%s\n' "${arg}" | sed 's/^--without-//')"
        append_arg "-D${option}=false"
        ;;
	--update-configure)
		set -e
		_url="https://raw.githubusercontent.com/riscygeek/meson-configure/master/configure"
		if command -v curl >/dev/null; then
			curl -sLo configure.new "$_url"
		elif command -v wget >/dev/null; then
			wget -qO configure.newe "$_url"
		else
			eprintf 'configure: please make sure that either wget, or curl is installed.\n'
			exit 1
		fi
		chmod +x configure.new
		mv configure.new configure
		exit 0
		;;
    *=*)
        name="$(printf '%s\n' "${arg}" | sed 's/^\([^=]*\)=.*$/\1/')"
        value="$(printf '%s\n' "${arg}" | sed 's/^[^=]*=\(.*\)$/\1/')"
        case "${name}" in
        ''|[0-9]*|*[!${as_cr_alnum}]*)
            eprintf 'configure: invalid variable name: %s\n' "${name}"
            ;;
        esac
        eval "${name}=\${value}"
        export "${name}"
        ;;
    -*)
        eprintf "configure: invalid option: %s\n" "${arg}"
        ;;
    esac
done

################################################################################
############################ Checking the arguments ############################
################################################################################

# TODO: Properly check if $0 = $srcdir/configure
[ -f "${srcdir}/configure" ] || { eprintf 'configure: Invalid source directory: %s\n' "${srcdir}"; }

# Resolve and check paths.
for name in prefix exec_prefix bindir sbindir libexecdir datarootdir    \
            datadir sysconfdir sharedstatedir localstatedir includedir  \
            infodir libdir localedir mandir; do
    eval "value=\$${name}"
    # Make sure it's an absolute path, or unresolved.
    case "${value}" in
    [/$]*)
        ;;
    *)
        eprintf 'configure: expected an absolute directory for --%s: %s\n' "${option}" "${value}"
        ;;
    esac
done

# Append paths to meson args.
for name in prefix bindir sbindir libexecdir datadir sysconfdir         \
            sharedstatedir localstatedir includedir infodir libdir      \
            localedir mandir; do
    # Evaluate the value.
    eval "value=\$${name}"
    eval "value=${value}"
    eval "value=${value}"

    append_arg "--${name}=${value}"
done

################################################################################
############################## Checking the system #############################
################################################################################

# Make sure `which` is a valid command.
is_quiet || printf 'checking for which... ' >&2
if which which >/dev/null 2>&1; then
    is_quiet || echo which >&2
else
    is_quiet || echo no >&2
    # TODO: Provide a generic `which` implementation.
    which() {
        IFS=':'
        for which_p in $PATH; do
            which_path="${which_p}/$1"
            if [ -x "${which_path}" ]; then
                printf '%s\n' "${which_path}"
                unset IFS
                return 0
            fi
        done
        unset IFS
        return 1
    }
fi

meson="$(check_for meson)" || exit 1
ninja="$(check_for ninja)" || exit 1

################################################################################
############################ Generating the Makefile ###########################
################################################################################

# Check if a Makefile already exists.
[ "${suppress_gen}" = 0 ] && [ -f Makefile ] && make distclean >/dev/null 2>&1

if is_quiet; then
    "${meson}" setup "${builddir}" "${srcdir}" ${meson_args} >/dev/null
else
    "${meson}" setup "${builddir}" "${srcdir}" ${meson_args}
fi || exit 1

# Generate a wrapper Makefile.
[ "${suppress_gen}" = 0 ] && \
sed 's/\\t/\t/g' >Makefile <<EOF
NINJA = ninja ${ninja_args} -C '${builddir}'

all:
\t\$(NINJA) all

clean:
\t\$(NINJA) clean

distclean:
\trm -rf '${builddir}'
\trm -f Makefile

install: all
\t\$(NINJA) install

uninstall:
\t\$(NINJA) uninstall

dist:
\trm -rf '${builddir}/meson-dist'
\t\$(NINJA) dist
\tcp -rv '${builddir}/meson-dist'/* .

check:
\t\$(NINJA) test

.PHONY: all clean distclean install uninstall dist check
EOF

[ "${suppress_gen}" = 1 ] && rm -rf "${builddir}"

# vim: tabstop=4 shiftwidth=4
